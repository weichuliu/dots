#!/usr/bin/env python3
# TODO: interactive questions/answers
#       more answer choice strategy
#       redirect if answer is duplicated?
#       warn on low quota
import sys
import re
import requests
import html.parser
import urllib.parse
import termcolor
from termcolor import colored
from bs4 import BeautifulSoup

# google
google_search_url = 'https://www.google.com/search?ie=UTF-8&q={}'
google_is_happy_header = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)' # To deceive google

# returns answers from /questions/ also returns body_markdown for q+a
so_api_filter = '!b1MMEU*.-3EcYn'
so_api_url = 'https://api.stackexchange.com/2.2/questions/{}?site={}&filter={}'

# only programing related stackexchange sites
stackexchange_sites = {
    'stackoverflow': 'stackoverflow.com',
    'serverfault': 'serverfault.com',
    'superuser': 'superuser.com',
    'askubuntu': 'askubuntu.com',
    'apple': 'apple.stackexchange.com',
    'unix': 'unix.stackexchange.com',
}

def colored_on_tty_stdout(s, color=None, on_color=None, attrs=None):
    """tty aware colored wrapper"""
    return __colored(s, color, on_color, attrs, sys.stdout.isatty())

def __colored(s, color=None, on_color=None, attrs=None, do_colorize=True):
    """a termcolor.colored wrapper. when do_colorize==False return original s"""
    if do_colorize:
        return colored(s, color, on_color, attrs)
    else:
        return s

def google_for_so_questions(query):
    google_query_url = google_search_url.format(urllib.parse.quote_plus(f'stackoverflow {query}'))
    response = requests.get(google_query_url, headers={'User-Agent': google_is_happy_header})
    if response.status_code != 200:
        print(f'Get status_code {res.status_code}!=200 when searching on google', file=sys.stderr)
        return []
    # mod from socli
    soup = BeautifulSoup(response.text, 'html.parser')
    results = soup.find_all('div', class_='g')
    try:
        #                   question url                   question title
        question_results = [(result.find("a").get("href"), result.find("h3", class_=re.compile('r|LC20lb')).get_text()) for result in results]
    except AttributeError:
        print(response.text, file=open('/tmp/shelloverflow_debug', 'w'))
        print('Failed to extract search results from google. Saved html to /tmp/shelloverflow_debug for debugging', file=sys.stderr)
        exit(1)
    return [q for q in question_results if extract_so_qid_from(q[0])]

def extract_so_qid_from(url):
    netloc = urllib.parse.urlsplit(url).netloc
    stackexchange_sites_pattern = '|'.join(stackexchange_sites.keys())
    stackexchange_sites_reversed = {v: k for k, v in stackexchange_sites.items()}

    if re.search(stackexchange_sites_pattern, netloc) and re.search('/(questions|q)/(\d+)', url):
        matched_domain = re.search(stackexchange_sites_pattern, netloc).group(0)
        matched_site = stackexchange_sites_reversed.get(matched_domain, None)
        qid = re.search('/(questions|q)/(\d+)', url).group(2)
        return matched_domain, qid
    else:
        return None

def so_qna_in_json(site, qid):
    so_question_api_url = so_api_url.format(qid, site, so_api_filter)
    res = requests.get(so_question_api_url)
    assert res.status_code == 200, f'return code is {res.status_code} while querying {so_question_api_url}'
    return res.json()

def render_so_question_link(question_link, question_title):
    return f"{colored_on_tty_stdout(question_title, attrs=['bold'])} ({colored_on_tty_stdout(question_link, 'green')})"

def render_so_qna(contents):
    def unescape_body_markdown(x):
        'unescape, CRLF to LF'
        return html.parser.unescape(x).replace('\r\n', '\n')
    question = contents['items'][0]
    question_title = question['title']
    question_link = question['link']
    question_body = unescape_body_markdown(question['body_markdown'])

    if question['is_answered']:
        answers = question['answers']

        top_voted_answer = max(answers, key=lambda a:a['score'])
        top_voted_answer_id = top_voted_answer['answer_id']
        top_voted_answer_vote = top_voted_answer['score']
        top_voted_answer_body = unescape_body_markdown(top_voted_answer['body_markdown'])

        accepted_answer = [a for a in answers if a['is_accepted']][0] if any(a['is_accepted'] for a in answers) else top_voted_answer
        accepted_answer_id = accepted_answer['answer_id']
        accepted_answer_vote = accepted_answer['score']
        accepted_answer_body = unescape_body_markdown(accepted_answer['body_markdown'])
    else:
        # No answers at all
        accepted_answer_id = top_voted_answer_id = 0
        accepted_answer_vote = top_voted_answer_vote = 0
        accepted_answer_body = top_voted_answer_body = '(There is no answer for this question)'

    if top_voted_answer_id != accepted_answer_id and accepted_answer_vote < top_voted_answer_vote:
        rendered_answers = [
            colored_on_tty_stdout(f"---------- Accepted Answer (^ {accepted_answer_vote}) ----------", 'yellow', attrs=['bold']),
            rendered_body(accepted_answer_body),
            colored_on_tty_stdout(f"---------- Top Voted Answer (^ {top_voted_answer_vote}) ----------", 'yellow', attrs=['bold']),
            rendered_body(top_voted_answer_body),
        ]
    else:
        rendered_answers = [
            colored_on_tty_stdout(f"---------- Best Answer (^ {accepted_answer_vote}) ----------", 'yellow', attrs=['bold']),
            rendered_body(accepted_answer_body),
        ]

    rendered_texts = [
        render_so_question_link(question_link, question_title),
        '',
        rendered_body(question_body),
        *rendered_answers,
    ]
    return '\n'.join(rendered_texts)

def rendered_body(body):
    # TODO
    # CAVEAT: Ok, the second highlight within highlight block will remove the effect
    #   probably time to do the real highlighting
    def __rendered_strong(m):
        return colored_on_tty_stdout(m.group(1), attrs=['bold'])
    def __rendered_code(m):
        green = colored('', 'green').replace(termcolor.RESET, '')
        return colored_on_tty_stdout(m.group(1).replace(termcolor.RESET, termcolor.RESET+green), 'green')
    def __rendered_quoted_code(m):
        return '> ' + colored_on_tty_stdout(m.group(1), 'green')
    def __rendered_quote(m):
        return colored_on_tty_stdout('> ', 'yellow')

    # strong
    body = re.sub(r'\*\*(.*?)\*\*', __rendered_strong, body, flags=re.M)
    # code
    body = re.sub(r'```(.*?)```', __rendered_code, body, flags=re.DOTALL)
    body = re.sub(r'<pre>(.*?)</pre>', __rendered_code, body, flags=re.DOTALL)
    body = re.sub(r'`(.*?)`', __rendered_code, body, flags=re.M)
    body = re.sub(r'^(    .*)$', __rendered_code, body, flags=re.M)
    # quoted_code
    body = re.sub(r'^> (    .*)$', __rendered_quoted_code, body, flags=re.M)
    # quote
    body = re.sub(r'^> ', __rendered_quote, body, flags=re.M)

    return body

def main():
    self_name = sys.argv[0].split('/')[-1]
    # when --show <site>.<qid>, directly show
    # <site> defaults to stackoverflow
    if sys.argv[1] == '--show':
        show_arg = '.'.join(sys.argv[2:])
        if re.match(r'^\d+$', show_arg):
            stackexchange_site, qid = 'stackoverflow', show_arg
        elif re.match(r'^\w+\.\d+$', show_arg):
            stackexchange_site, qid = show_arg.split('.')
        else:
            print(f'Cannot recognize "{show_arg}". It has to be like a "<qid>" or "<site>.<qid>"', file=sys.stderr)
            exit(1)
        assert stackexchange_site in stackexchange_sites
        questions = []
    else:
        query = ' '.join(sys.argv[1:])
        questions = google_for_so_questions(query)
        if questions:
            best_matched_question = questions[0]
            stackexchange_site, qid = extract_so_qid_from(best_matched_question[0])
        else:
            print(f'No useful result for "{query}". Sorry.', file=sys.stderr)
            exit(1)

    contents = so_qna_in_json(stackexchange_site, qid)
    print(render_so_qna(contents))

    if questions:
        print(colored_on_tty_stdout('---------- Other Questions ----------', attrs=['bold']))
        for q in questions[1:]:
            print(render_so_question_link(f'{self_name} --show {".".join(extract_so_qid_from(q[0]))}', q[1]))

if __name__ == '__main__':
    main()
