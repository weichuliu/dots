#!/bin/bash

## git
gdifff () { git diff --color "$@" | diff-so-fancy; }
prune () (
  set -euo pipefail

  remote_repo="${remote_repo:-origin}"
  branch_name="$(git rev-parse --abbrev-ref HEAD)"

  if [[ "${branch_name}" =~ ^(master|develop)$ ]]; then
    git_action=pull
  else
    git_action=fetch
  fi
  echo $(tput setaf 6)git $git_action $remote_repo --prune$(tput sgr0)
  git $git_action $remote_repo --prune
)
push () (
  set -euo pipefail

  remote_repo="${remote_repo:-origin}"
  branch_name="$(git rev-parse --abbrev-ref HEAD)"

  [[ "${branch_name}" =~ ^(master|develop)$ ]] &&
    echo "Cannot push to master or develop" &&
    return 1

  if [ "${1:-}" == "force" ]; then
    cmd="git push $remote_repo --force-with-lease"
    color_cmd="git push $remote_repo $(tput setaf 1)--force-with-lease $(tput setaf 2)$branch_name$(tput sgr0)"
  else
    cmd="git push $remote_repo"
    color_cmd="git push $remote_repo $(tput setaf 2)$branch_name$(tput sgr0)"
  fi

  echo "$color_cmd"
  read -p "[type 42 to continue] " THE_answer
  [[ "${THE_answer}" = "42" ]]
  $cmd $branch_name
)

## subl
sf. () {
  echo "$(f. $@)"
  subl $(f. $@)
}
sack () {
  echo "$(ack -l $@)"
  subl $(ack -l $@)
}

# sum up the $1 column
sumup () {
  awk -v column="$1" '{a += $column} END {print a}' -
}

# pbedit
pbedit () {
  # Edit clipboard using vim, then save it back
  # If stdout is pipe, pbpaste to stdout
  local temporary_buffer="$(mktemp)"
  pbpaste > "$temporary_buffer"
  (
    exec &> /dev/tty
    # do no modify the EOF newline
    vim -c 'set nofixendofline' "$temporary_buffer"
  )
  pbcopy < "$temporary_buffer"
  rm "$temporary_buffer"
  # If stdout is a pipe
  [[ -p /dev/stdout ]] && pbpaste
}
